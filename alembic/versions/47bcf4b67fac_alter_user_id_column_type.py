"""alter user_id column type

Revision ID: 47bcf4b67fac
Revises: e34b6ab5c1cc
Create Date: 2024-08-27 13:12:15.257376

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '47bcf4b67fac'
down_revision: Union[str, None] = 'e34b6ab5c1cc'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None



def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###

    # Drop foreign key constraints
    op.drop_constraint('answers_user_id_fkey', 'answers', type_='foreignkey')
    op.drop_constraint('comments_user_id_fkey', 'comments', type_='foreignkey')
    op.drop_constraint(
        'questions_user_id_fkey', 'questions', type_='foreignkey'
        )
    op.drop_constraint(
        'role_user_user_id_fkey', 'role_user', type_='foreignkey'
        )
    op.drop_constraint('votes_user_id_fkey', 'votes', type_='foreignkey')

    # Alter column types
    op.alter_column(
        'answers', 'user_id',
        existing_type=sa.INTEGER(),
        type_=sa.String(),
        existing_nullable=False
        )
    op.alter_column(
        'comments', 'user_id',
        existing_type=sa.INTEGER(),
        type_=sa.String(),
        existing_nullable=False
        )
    op.alter_column(
        'questions', 'user_id',
        existing_type=sa.INTEGER(),
        type_=sa.String(),
        existing_nullable=False
        )
    op.alter_column(
        'role_user', 'user_id',
        existing_type=sa.INTEGER(),
        type_=sa.String(),
        existing_nullable=False
        )
    op.alter_column(
        'users', 'id',
        existing_type=sa.INTEGER(),
        type_=sa.String(),
        existing_nullable=False,
        existing_server_default=sa.text("nextval('users_id_seq'::regclass)")
        )
    op.alter_column(
        'votes', 'user_id',
        existing_type=sa.INTEGER(),
        type_=sa.String(),
        existing_nullable=False
        )

    # Recreate foreign key constraints
    op.create_foreign_key(
        'answers_user_id_fkey', 'answers', 'users', ['user_id'], ['id']
        )
    op.create_foreign_key(
        'comments_user_id_fkey', 'comments', 'users', ['user_id'], ['id']
        )
    op.create_foreign_key(
        'questions_user_id_fkey', 'questions', 'users', ['user_id'], ['id']
        )
    op.create_foreign_key(
        'role_user_user_id_fkey', 'role_user', 'users', ['user_id'], ['id']
        )
    op.create_foreign_key(
        'votes_user_id_fkey', 'votes', 'users', ['user_id'], ['id']
        )

    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###

    # Drop foreign key constraints
    op.drop_constraint('answers_user_id_fkey', 'answers', type_='foreignkey')
    op.drop_constraint('comments_user_id_fkey', 'comments', type_='foreignkey')
    op.drop_constraint(
        'questions_user_id_fkey', 'questions', type_='foreignkey'
        )
    op.drop_constraint(
        'role_user_user_id_fkey', 'role_user', type_='foreignkey'
        )
    op.drop_constraint('votes_user_id_fkey', 'votes', type_='foreignkey')

    # Revert column types with explicit casting
    op.alter_column(
        'votes', 'user_id',
        existing_type=sa.String(),
        type_=sa.INTEGER(),
        existing_nullable=False,
        postgresql_using='user_id::integer'
        )
    op.alter_column(
        'users', 'id',
        existing_type=sa.String(),
        type_=sa.INTEGER(),
        existing_nullable=False,
        existing_server_default=sa.text("nextval('users_id_seq'::regclass)"),
        postgresql_using='id::integer'
        )
    op.alter_column(
        'role_user', 'user_id',
        existing_type=sa.String(),
        type_=sa.INTEGER(),
        existing_nullable=False,
        postgresql_using='user_id::integer'
        )
    op.alter_column(
        'questions', 'user_id',
        existing_type=sa.String(),
        type_=sa.INTEGER(),
        existing_nullable=False,
        postgresql_using='user_id::integer'
        )
    op.alter_column(
        'comments', 'user_id',
        existing_type=sa.String(),
        type_=sa.INTEGER(),
        existing_nullable=False,
        postgresql_using='user_id::integer'
        )
    op.alter_column(
        'answers', 'user_id',
        existing_type=sa.String(),
        type_=sa.INTEGER(),
        existing_nullable=False,
        postgresql_using='user_id::integer'
        )

    # Recreate foreign key constraints
    op.create_foreign_key(
        'answers_user_id_fkey', 'answers', 'users', ['user_id'], ['id']
        )
    op.create_foreign_key(
        'comments_user_id_fkey', 'comments', 'users', ['user_id'], ['id']
        )
    op.create_foreign_key(
        'questions_user_id_fkey', 'questions', 'users', ['user_id'], ['id']
        )
    op.create_foreign_key(
        'role_user_user_id_fkey', 'role_user', 'users', ['user_id'], ['id']
        )
    op.create_foreign_key(
        'votes_user_id_fkey', 'votes', 'users', ['user_id'], ['id']
        )

    # ### end Alembic commands ###
