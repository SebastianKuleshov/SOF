{
  "detail": "{'__module__': 'typing', '__doc__': \"Type variable.\\n\\n    Usage::\\n\\n      T = TypeVar('T')  # Can be anything\\n      A = TypeVar('A', str, bytes)  # Must be str or bytes\\n\\n    Type variables exist primarily for the benefit of static type\\n    checkers.  They serve as the parameters for generic types as well\\n    as for generic function definitions.  See class Generic for more\\n    information on generic types.  Generic functions work as follows:\\n\\n      def repeat(x: T, n: int) -> List[T]:\\n          '''Return a list containing n references to x.'''\\n          return [x]*n\\n\\n      def longest(x: A, y: A) -> A:\\n          '''Return the longest of two strings.'''\\n          return x if len(x) >= len(y) else y\\n\\n    The latter example's signature is essentially the overloading\\n    of (str, str) -> str and (bytes, bytes) -> bytes.  Also note\\n    that if the arguments are instances of some subclass of str,\\n    the return type is still plain str.\\n\\n    At runtime, isinstance(x, T) and issubclass(C, T) will raise TypeError.\\n\\n    Type variables defined with covariant=True or contravariant=True\\n    can be used to declare covariant or contravariant generic types.\\n    See PEP 484 for more details. By default generic types are invariant\\n    in all type variables.\\n\\n    Type variables can be introspected. e.g.:\\n\\n      T.__name__ == 'T'\\n      T.__constraints__ == ()\\n      T.__covariant__ == False\\n      T.__contravariant__ = False\\n      A.__constraints__ == (str, bytes)\\n\\n    Note that only type variables defined in global scope can be pickled.\\n    \", '__slots__': ('__name__', '__bound__', '__constraints__', '__covariant__', '__contravariant__', '__dict__'), '__init__': <function TypeVar.__init__ at 0x7fd622e5c9d0>, '__bound__': <member '__bound__' of 'TypeVar' objects>, '__constraints__': <member '__constraints__' of 'TypeVar' objects>, '__contravariant__': <member '__contravariant__' of 'TypeVar' objects>, '__covariant__': <member '__covariant__' of 'TypeVar' objects>, '__name__': <member '__name__' of 'TypeVar' objects>, '__dict__': <attribute '__dict__' of 'TypeVar' objects>} not found"
}